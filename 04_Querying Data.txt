Dataset: https://console.cloud.google.com/marketplace/product/bigquery-public-datasets/google-search-trends
Section: Advanced Querying Techniques

#calculates the average rank of a search term in the top_terms table in the Charlotte NC designated market area (dma)
https://console.cloud.google.com/bigquery?sq=245732404565:260f22115c164665bea681eb0acb3ba4
 
SELECT DISTINCT(term), rank, refresh_date, 
   (SELECT AVG(rank) FROM `bigquery-public-data.google_trends.top_terms` WHERE refresh_date = "2023-06-10" 
AND dma_name = "Charlotte NC") AS avg_rank 
FROM `bigquery-public-data.google_trends.top_terms` 
WHERE refresh_date = "2023-06-10" 


#finds the terms with the highest peak interest each year (experimental)
https://console.cloud.google.com/bigquery?sq=245732404565:db3a78162d324e0891c8f9d4ce012df4

WITH yearly_peaks AS ( 
  SELECT 
	term, 
	EXTRACT(YEAR FROM week) AS year, 
	rank, 
	ROW_NUMBER() OVER (PARTITION BY EXTRACT(YEAR FROM 	week) ORDER BY rank DESC) AS peak_rank 
  FROM `bigquery-public-data.google_trends.top_terms` 
) 
SELECT term, year, rank 
FROM yearly_peaks 
WHERE peak_rank = 1 
ORDER BY year 

#top 25 terms for the latest week, sorted by rank
https://console.cloud.google.com/bigquery?sq=245732404565:52e3ad01a7d14a3caf7d2463c625868b

SELECT term, ARRAY_AGG(STRUCT(rank,week) ORDER BY week DESC LIMIT 1) AS x 
FROM `bigquery-public-data.google_trends.top_terms` 
WHERE 
    refresh_date = (SELECT MAX(refresh_date) FROM `bigquery-public-data.google_trends.top_terms`) 
GROUP BY term 
ORDER BY (SELECT rank FROM UNNEST(x)) 


### **1. Basic SQL Queries**

#### **1.1. SELECT Statement**

**Example: Basic SELECT**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`;
```

**Example: Selecting All Columns**

```sql
SELECT *
FROM `your_project.your_dataset.your_table`;
```

#### **1.2. WHERE Clause**

**Example: Filtering Data**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`
WHERE age > 30;
```

**Example: Multiple Conditions**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`
WHERE age > 30 AND city = 'New York';
```

#### **1.3. ORDER BY Clause**

**Example: Sorting Results**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`
ORDER BY age DESC;
```

#### **1.4. LIMIT Clause**

**Example: Limiting Results**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`
ORDER BY age DESC
LIMIT 10;
```

### **2. Aggregation Functions**

#### **2.1. COUNT, SUM, AVG**

**Example: Counting Rows**

```sql
SELECT COUNT(*) AS total_count
FROM `your_project.your_dataset.your_table`;
```

**Example: Summing Values**

```sql
SELECT SUM(age) AS total_age
FROM `your_project.your_dataset.your_table`;
```

**Example: Average Value**

```sql
SELECT AVG(age) AS average_age
FROM `your_project.your_dataset.your_table`;
```

#### **2.2. GROUP BY Clause**

**Example: Grouping Data**

```sql
SELECT city, COUNT(*) AS city_count
FROM `your_project.your_dataset.your_table`
GROUP BY city;
```

**Example: Aggregating with GROUP BY**

```sql
SELECT city, AVG(age) AS average_age
FROM `your_project.your_dataset.your_table`
GROUP BY city;
```

### **3. Joins**

#### **3.1. INNER JOIN**

**Example: Joining Tables**

```sql
SELECT a.name, b.department
FROM `your_project.your_dataset.employees` a
INNER JOIN `your_project.your_dataset.departments` b
ON a.department_id = b.department_id;
```

#### **3.2. LEFT JOIN**

**Example: Left Join**

```sql
SELECT a.name, b.department
FROM `your_project.your_dataset.employees` a
LEFT JOIN `your_project.your_dataset.departments` b
ON a.department_id = b.department_id;
```

#### **3.3. RIGHT JOIN**

**Example: Right Join**

```sql
SELECT a.name, b.department
FROM `your_project.your_dataset.employees` a
RIGHT JOIN `your_project.your_dataset.departments` b
ON a.department_id = b.department_id;
```

#### **3.4. FULL JOIN**

**Example: Full Join**

```sql
SELECT a.name, b.department
FROM `your_project.your_dataset.employees` a
FULL JOIN `your_project.your_dataset.departments` b
ON a.department_id = b.department_id;
```

### **4. Subqueries**

#### **4.1. Subquery in SELECT**

**Example: Subquery for Filtering**

```sql
SELECT name, age
FROM `your_project.your_dataset.your_table`
WHERE age > (SELECT AVG(age) FROM `your_project.your_dataset.your_table`);
```

#### **4.2. Subquery in FROM**

**Example: Using Subquery in FROM Clause**

```sql
SELECT city, COUNT(*) AS city_count
FROM (
  SELECT city
  FROM `your_project.your_dataset.your_table`
  WHERE age > 30
)
GROUP BY city;
```

### **5. Window Functions**

#### **5.1. ROW_NUMBER**

**Example: Row Number with Partition**

```sql
SELECT name, age, 
       ROW_NUMBER() OVER (PARTITION BY city ORDER BY age DESC) AS row_num
FROM `your_project.your_dataset.your_table`;
```

#### **5.2. RANK**

**Example: Ranking Rows**

```sql
SELECT name, age, 
       RANK() OVER (PARTITION BY city ORDER BY age DESC) AS rank
FROM `your_project.your_dataset.your_table`;
```

#### **5.3. LAG and LEAD**

**Example: Using LAG**

```sql
SELECT name, age,
       LAG(age, 1) OVER (ORDER BY age) AS previous_age
FROM `your_project.your_dataset.your_table`;
```

**Example: Using LEAD**

```sql
SELECT name, age,
       LEAD(age, 1) OVER (ORDER BY age) AS next_age
FROM `your_project.your_dataset.your_table`;
```

### **6. Common Table Expressions (CTEs)**

#### **6.1. Basic CTE**

**Example: Using WITH Clause**

```sql
WITH HighAge AS (
  SELECT name, age
  FROM `your_project.your_dataset.your_table`
  WHERE age > 30
)
SELECT *
FROM HighAge
WHERE name LIKE 'J%';
```

### **7. User-Defined Functions (UDFs)**

#### **7.1. SQL UDF**

**Example: Creating a SQL UDF**

```sql
CREATE FUNCTION `your_project.your_dataset.my_udf`(x INT64)
RETURNS STRING
LANGUAGE js AS """
  return 'Value: ' + x;
""";

SELECT `your_project.your_dataset.my_udf`(5) AS result;
```

#### **7.2. JavaScript UDF**

**Example: Using JavaScript UDF**

```sql
CREATE FUNCTION `your_project.your_dataset.add_days`(date DATE, days INT64)
RETURNS DATE
LANGUAGE js AS """
  var result = new Date(date);
  result.setDate(result.getDate() + days);
  return result.toISOString().split('T')[0];
""";

SELECT `your_project.your_dataset.add_days`('2024-01-01', 5) AS new_date;
```

### **8. Query Performance Optimization**

#### **8.1. Using Materialized Views**

**Example: Creating a Materialized View**

```sql
CREATE MATERIALIZED VIEW `your_project.your_dataset.mv_example` AS
SELECT city, COUNT(*) AS total_count
FROM `your_project.your_dataset.your_table`
GROUP BY city;
```

#### **8.2. Query Caching**

- **Understanding Cache**: BigQuery caches query results to improve performance for repeated queries.

### **9. Advanced Features**

#### **9.1. ARRAY and STRUCT**

**Example: Using ARRAY**

```sql
SELECT name, ARRAY_AGG(age) AS ages
FROM `your_project.your_dataset.your_table`
GROUP BY name;
```

**Example: Using STRUCT**

```sql
SELECT STRUCT(name AS person_name, age AS person_age)
FROM `your_project.your_dataset.your_table`;
```

#### **9.2. JSON Functions**

**Example: Extracting Data from JSON**

```sql
SELECT JSON_EXTRACT_SCALAR(json_column, '$.name') AS name
FROM `your_project.your_dataset.your_table`;
```

#### **9.3. Geospatial Queries**

**Example: Using Geospatial Functions**

```sql
SELECT *
FROM `your_project.your_dataset.geospatial_table`
WHERE ST_Distance(ST_GeogPoint(longitude, latitude), ST_GeogPoint(-122.084, 37.421)) < 1000;
```

### **10. Best Practices**

- **Use Standard SQL**: Prefer Standard SQL for its extended features and better support.
- **Optimize Queries**: Use partitioning, clustering, and avoid unnecessary complex joins.
- **Monitor Performance**: Use the Query Plan Explanation to understand and optimize query performance.

These examples should provide a comprehensive overview of querying data in BigQuery, covering a range of SQL features and advanced functionalities.